When would you want to use a remote repository rather than keeping all in your local computer?
When I want to access my code from anywhere else other my local computer, it will be much more flexible and accessible.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?
This will give me more control on my code base.

Describe the differences between forks, clones, and branches. When would you
use one instead of another?
I use fork when copying a github repository from others;
I use clones when copying a repository from my own github or local;
I use branch when branching out in my local repository.

some commands:
git remote # display remote repository
git remote add name remote_repository_address # add remote repository
git remote -v # display verbose information of remote repos
git push remote_name local_branch # push commmit to remote
git pull reomte_name local_branch # pull commit to local
git fetch origin # update local copy of remote repository
git log
git merge master origin/master # merge local copy of remote repos and master
git pull orgin master # is the same as the above two steps

What is the benefit of having a copy of the last known state of the remote
stored locally?
I can devolop my code offline and can still access to the copy of the
remote repos. And If there is any conflict, I get to reslove the conflic on my
local machine instead of messing up the remote repos.

# Pull request is used to collaborate with other developers, asking reviews
# from others.

How would you collaborate without using Git or GitHub? What would be easier,
and what would be hard?
I can create new branch in my own local repos, and initiate pull request to
others to get reviews. Meanwhile, I can also receive request from others to
review their code. The collaboration is easier, but the timing might be
tricky.

When would you want to make changes in a seperate branch rather than directly
in master? What benefits does each approach have?
I could experiment anything in a seprate branch without messing up the main
branch. If I want to commit to master, I could pull request and after the code
is reviewed, the merge could be safely performed. On the contrary, the first
requires more steps than the second one.


